// Mocks generated by Mockito 5.4.6 from annotations
// in intellicart/test/usecase_comprehensive_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:intellicart/domain/entities/order.dart' as _i8;
import 'package:intellicart/domain/entities/product.dart' as _i2;
import 'package:intellicart/domain/entities/user.dart' as _i3;
import 'package:intellicart/domain/repositories/order_repository.dart' as _i7;
import 'package:intellicart/domain/repositories/product_repository.dart' as _i4;
import 'package:intellicart/domain/repositories/user_repository.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeProduct_0 extends _i1.SmartFake implements _i2.Product {
  _FakeProduct_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeUser_1 extends _i1.SmartFake implements _i3.User {
  _FakeUser_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [ProductRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockProductRepository extends _i1.Mock implements _i4.ProductRepository {
  MockProductRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<List<_i2.Product>> getAllProducts() =>
      (super.noSuchMethod(
            Invocation.method(#getAllProducts, []),
            returnValue: _i5.Future<List<_i2.Product>>.value(<_i2.Product>[]),
          )
          as _i5.Future<List<_i2.Product>>);

  @override
  _i5.Future<_i2.Product?> getProductById(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#getProductById, [id]),
            returnValue: _i5.Future<_i2.Product?>.value(),
          )
          as _i5.Future<_i2.Product?>);

  @override
  _i5.Future<_i2.Product> createProduct(_i2.Product? product) =>
      (super.noSuchMethod(
            Invocation.method(#createProduct, [product]),
            returnValue: _i5.Future<_i2.Product>.value(
              _FakeProduct_0(
                this,
                Invocation.method(#createProduct, [product]),
              ),
            ),
          )
          as _i5.Future<_i2.Product>);

  @override
  _i5.Future<_i2.Product> updateProduct(_i2.Product? product) =>
      (super.noSuchMethod(
            Invocation.method(#updateProduct, [product]),
            returnValue: _i5.Future<_i2.Product>.value(
              _FakeProduct_0(
                this,
                Invocation.method(#updateProduct, [product]),
              ),
            ),
          )
          as _i5.Future<_i2.Product>);

  @override
  _i5.Future<void> deleteProduct(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteProduct, [id]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> syncProducts() =>
      (super.noSuchMethod(
            Invocation.method(#syncProducts, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);
}

/// A class which mocks [UserRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserRepository extends _i1.Mock implements _i6.UserRepository {
  MockUserRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i3.User?> getCurrentUser() =>
      (super.noSuchMethod(
            Invocation.method(#getCurrentUser, []),
            returnValue: _i5.Future<_i3.User?>.value(),
          )
          as _i5.Future<_i3.User?>);

  @override
  _i5.Future<_i3.User> login(String? email, String? password) =>
      (super.noSuchMethod(
            Invocation.method(#login, [email, password]),
            returnValue: _i5.Future<_i3.User>.value(
              _FakeUser_1(this, Invocation.method(#login, [email, password])),
            ),
          )
          as _i5.Future<_i3.User>);

  @override
  _i5.Future<void> logout() =>
      (super.noSuchMethod(
            Invocation.method(#logout, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<_i3.User> register(
    String? email,
    String? password,
    String? name,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#register, [email, password, name]),
            returnValue: _i5.Future<_i3.User>.value(
              _FakeUser_1(
                this,
                Invocation.method(#register, [email, password, name]),
              ),
            ),
          )
          as _i5.Future<_i3.User>);
}

/// A class which mocks [OrderRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockOrderRepository extends _i1.Mock implements _i7.OrderRepository {
  MockOrderRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<List<_i8.Order>> getUserOrders(String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#getUserOrders, [userId]),
            returnValue: _i5.Future<List<_i8.Order>>.value(<_i8.Order>[]),
          )
          as _i5.Future<List<_i8.Order>>);

  @override
  _i5.Future<void> createOrder(_i8.Order? order) =>
      (super.noSuchMethod(
            Invocation.method(#createOrder, [order]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> updateOrderStatus(String? orderId, String? status) =>
      (super.noSuchMethod(
            Invocation.method(#updateOrderStatus, [orderId, status]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);
}
